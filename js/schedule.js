if (window.Telegram && Telegram.WebApp) {
    Telegram.WebApp.expand();
    Telegram.WebApp.lockOrientation();
    Telegram.WebApp.SettingsButton.show();
    Telegram.WebApp.BackButton.hide();
}

Telegram.WebApp.SettingsButton.onClick(function(){ 
    window.location.href = 'setting.html'; 
});

const animations = [
    'assets/DuckEmojiPodcast.json',
    'assets/DuckEmojiGaming.json',
    'assets/DuckEmojiUpdate.json'
];

const fullDetails = [
    `–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∞–π—Ñ—Ö–∞–∫–∞—Ö –¥–ª—è –∑–∞—á—ë—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏. –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Å–æ–≤–µ—Ç–∞–º–∏ –æ—Ç –æ—Ç–ª–∏—á–Ω–∏–∫–æ–≤, –∫–∞–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º –∏ —É—Å–ø–µ—à–Ω–æ —Å–¥–∞—Ç—å –≤—Å–µ –∑–∞—á—ë—Ç—ã.`,
    `<b>–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç –≤ –≤—É–∑–µ: CS2 —Å–æ–±–µ—Ä—ë—Ç –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤</b>

<br><br>
–í –Ω–∞—à–µ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ —Å—Ç–∞—Ä—Ç—É–µ—Ç –º–∞—Å—à—Ç–∞–±–Ω—ã–π –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –ø–æ <b>Counter-Strike 2</b>! –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—Ä–æ—è–≤–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏, —Å—Ä–∞–∑–∏—Ç—å—Å—è —Å —Å–∏–ª—å–Ω–µ–π—à–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –ø–æ–±–æ—Ä–æ—Ç—å—Å—è –∑–∞ —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã.

<br><br>
<b>üî• –ß—Ç–æ –≤–∞—Å –∂–¥—ë—Ç?</b>
<ul>
  <li><b>–î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è</b>: 15‚Äì30 –Ω–æ—è–±—Ä—è 2023 –≥–æ–¥–∞</li>
  <li><b>–§–æ—Ä–º–∞—Ç</b>: 5 –Ω–∞ 5, —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —Å –≥—Ä—É–ø–ø–æ–≤—ã–º —ç—Ç–∞–ø–æ–º –∏ –ø–ª–µ–π-–æ—Ñ—Ñ</li>
  <li><b>–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥</b>:
    <ul>
      <li>ü•á <b>1 –º–µ—Å—Ç–æ</b> ‚Äì 50 000 ‚ÇΩ + –∏–≥—Ä–æ–≤—ã–µ –¥–µ–≤–∞–π—Å—ã –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤</li>
      <li>ü•à <b>2 –º–µ—Å—Ç–æ</b> ‚Äì 30 000 ‚ÇΩ</li>
      <li>ü•â <b>3 –º–µ—Å—Ç–æ</b> ‚Äì 20 000 ‚ÇΩ</li>
    </ul>
    + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã –∑–∞ MVP –∏ –ª—É—á—à–∏–µ –º–æ–º–µ–Ω—Ç—ã –º–∞—Ç—á–µ–π
  </li>
</ul>

<br>
<b>üéÆ –£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è</b>
<ul>
  <li>–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ <b>—Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞</b> (–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è 1 –∑–∞–ø–∞—Å–Ω–æ–π –∏–≥—Ä–æ–∫).</li>
  <li>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ –¥–æ <b>10 –Ω–æ—è–±—Ä—è</b> —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç —Ç—É—Ä–Ω–∏—Ä–∞.</li>
  <li>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ —Ü–µ—Ä–µ–º–æ–Ω–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ —Ñ–∏–Ω–∞–ª–∞.</li>
</ul>

<br>
<b>üèÜ –ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?</b>
<ul>
  <li><b>–û–ø—ã—Ç</b>: –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—ã–≥—Ä–∞—Ç—å –≤ —É—Å–ª–æ–≤–∏—è—Ö –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.</li>
  <li><b>–ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥</b>: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ç–∏–º–º–µ–π—Ç–∞–º–∏.</li>
  <li><b>–®–∞–Ω—Å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ</b>: –õ—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≤—É–∑–æ–≤—Å–∫—É—é –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω—É—é –ª–∏–≥—É.</li>
</ul>

<br>
<b>üì¢ –ì–¥–µ —Å–º–æ—Ç—Ä–µ—Ç—å?</b><br>
–¢—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –º–∞—Ç—á–µ–π –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –Ω–∞ <b>Twitch</b> –∏ <b>YouTube</b> —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞–º–∏. –§–∏–Ω–∞–ª —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ–∫–∞–∂—É—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –∞–∫—Ç–æ–≤–æ–º –∑–∞–ª–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞!

<br><br>
<b>–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—É, –ø—Ä–æ–∫–∞—á–∏–≤–∞–π —Å–∫–∏–ª–ª—ã –∏ –¥–æ–∫–∞–∂–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã –¥–æ—Å—Ç–æ–∏–Ω —Å—Ç–∞—Ç—å —á–µ–º–ø–∏–æ–Ω–æ–º!</b>

<br><br>
üöÄ <i>–ì–æ—Ç–æ–≤—ã –∫ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–º –∫–ª–∞—Ç—á–∞–º? –í—Ä–µ–º—è –∑–∞—è–≤–∏—Ç—å –æ —Å–µ–±–µ –≤ CS2!</i>

<br><br>
<hr>`,
    `–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ 47Par. –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–µ–π—á–∞—Å!`
];
    
animations.forEach((animationUrl, index) => {
    const containerId = `animation-container-${index + 1}`;
    const animationContainer = document.getElementById(containerId);
      
    if (animationContainer) {
        fetch(animationUrl, { cache: 'default' })
            .then(response => {
                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                return response.json();
            })
            .then(animationData => {
                lottie.loadAnimation({
                    container: animationContainer,
                    renderer: 'svg',
                    loop: true,
                    autoplay: true,
                    animationData: animationData
                });
            })
        .catch(error => {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ ${index + 1}:`, error);
        });
    } else {
        console.warn(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
});

const scrollContainer = document.getElementById('horizontal-scroll');
const scrollItems = document.querySelectorAll('.scroll-item');
const buttons = document.querySelectorAll('#app .button');

if (scrollContainer) {
    scrollContainer.addEventListener('scroll', () => {
        const containerWidth = scrollContainer.offsetWidth;
        const scrollLeft = scrollContainer.scrollLeft;
        const index = Math.round(scrollLeft / containerWidth);

        scrollItems.forEach((item, i) => item.classList.toggle('active', i === index));
        buttons.forEach((button, i) => button.classList.toggle('active', i === index));
    });
} else {
    Telegram.WebApp.showAlert('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

const fullscreenOverlay = document.getElementById('fullscreen-overlay');
const fullscreenContent = document.getElementById('fullscreen-content');
const fullscreenAnimation = document.getElementById('fullscreen-animation');

scrollItems.forEach((item, index) => {
    item.addEventListener('click', () => {
        openFullscreen(index);
    });
});

function openFullscreen(index) {
    document.getElementById('fullscreen-text').innerHTML = fullDetails[index];
            
    fetch(animations[index], { cache: 'default' })
        .then(response => response.json())
        .then(animationData => {
            fullscreenAnimation.innerHTML = '';
                lottie.loadAnimation({
                    container: fullscreenAnimation,
                    renderer: 'svg',
                    loop: true,
                    autoplay: true,
                    animationData: animationData
                });
            });
    
    fullscreenOverlay.classList.add('show');
    setTimeout(() => {
        fullscreenContent.classList.add('show');
    }, 10);
}

fullscreenOverlay.addEventListener('click', (e) => {
    if (e.target === fullscreenOverlay) {
        closeFullscreen();
    }
});

function closeFullscreen() {
    fullscreenContent.classList.remove('show');
    fullscreenOverlay.classList.remove('show');
}